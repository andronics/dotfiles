#!/usr/bin/env zsh

name=$(basename $0)

# ------------------------------

source "$(which _cava)"
source "$(which _jq)"
source "$(which _log)"


# ------------------------------

audio_cache_dir="${XDG_CACHE_HOME}/${name}"
audio_config_dir="${XDG_CONFIG_HOME}/${name}"
audio_data_dir="${XDG_DATA_HOME}/${name}"

# ------------------------------

audio_devices=$(cat "${audio_data_dir}/devices.json")
audio_levels=$(cat "${audio_data_dir}/levels.json")

# ------------------------------

audio_spectrum_cfg="${audio_cache_dir}/spectrum.cfg"
audio_spectrum_pipe="${audio_cache_dir}/spectrum.fifo"
audio_volume_max=150
audio_volume_step=5

# ------------------------------

source "$(which _args)"

# ------------------------------

_audio() {

    [[ $# -eq 0 ]] && {
        log-error "command not specified"
        return 1
    }

    _command=$1
    shift 2>/dev/null

    case "${_command}" in
        
        device-name) _audio_device_name "$@" ;;
        device-icon) _audio_device_icon "$@" ;;

        level-name) _audio_level_name "$@" ;;
        level-icon) _audio_level_icon "$@" ;;
        
        mute-disable) _audio_mute_disable "$@" ;;
        mute-enable) _audio_mute_enable "$@" ;;
        mute-toggle) _audio_mute_toggle "$@" ;;
        
        restart) _audio_restart "$@" ;;

        sink-next) _audio_sink_next "$@" ;;
        sink-prev) _audio_sink_prev "$@" ;;

        spectrum) _audio_spectrum "$@" ;;
        
        subscribe) _audio_subscribe "$@" ;;
        
        volume-decrease) _audio_volume_decrease "$@" ;;
        volume-increase) _audio_volume_increase "$@" ;;
        volume-query) _audio_volume_query "$@" ;;

        *) log-warning "command '%s' unsupported" "${_command}" ;;
        
    esac

}

# ------------------------------

_audio_device_icon() {

    _current=$(_audio_sink_current)
    _name=$(_audio_sink_name "${_current}")

    _filter='.[] | .pattern as $pattern  | select($name | test($pattern)) | .icon' 
    
    echo "${audio_devices}" | jq-query "${_filter}"  "name" "${_name}" "people" "1"

}


_audio_device_name() {

    _current=$(_audio_sink_current)
    _name=$(_audio_sink_name "${_current}")

    _filter='.[] | .pattern as $pattern  | select($name | test($pattern)) | .name' 
    
    echo "${audio_devices}" | jq-query "${_filter}" "name" "${_name}" 

}

# ------------------------------

_audio_level_icon() {

    _sink=$(_audio_sink_current)
    _level=$(_audio_level_name)

    echo "${audio_levels}" | jq-query '."'${_level}'"'

}

_audio_level_name() {
    
    _sink=$(_audio_sink_current)
    _level="muted"

    [[ "$(_audio_sink_muted "${_sink}")" = "yes" ]] || {

        _volume=$(_audio_sink_volume ${_sink})
    
        case ${_volume} in
            [0-9]|1[0-9]) _level="lowest" ;;
            [2-3][0-9]) _level="low" ;;
            [4-5][0-9]) _level="medium" ;;
            [6-7][0-9]) _level="high" ;;
            [8-9][0-9]|1[0-4][0-9]|150) _level="highest" ;;
            *) _level="fucked" ;;
        esac

    }

    echo "${_level}"

}

# ------------------------------

_audio_mute_disable() {

    _sink=$(_audio_sink_current)

    pactl set-sink-mute "${_sink}" "0"

}

_audio_mute_enable() {

    _sink=$(_audio_sink_current)

    pactl set-sink-mute "${_sink}" "1"

}

_audio_mute_toggle() {

    _sink=$(_audio_sink_current)

    pactl set-sink-mute "${_sink}" "toggle"
}

# ------------------------------

_audio_restart() {

    pulseaudio --kill
    pulseaudio --start

}

# ------------------------------

_audio_sink_current() {

    pulseaudio --check || return 1
    
    pacmd list-sinks | awk '/\* index:/{print $3}'

}

_audio_sink_default() {

    _sink=$1

    pacmd set-default-sink "${_sink}"

}

_audio_sink_indexes() {
    
    _index=0
    _indexes=()

    while read -r _sink; do
    
        _indexes[${_index}]=$(echo "${_sink}}" | cut -f1)
        _index=$((_index + 1))
    
    done <<< $(pactl list short sinks)

    echo "${_indexes[@]}"

}

_audio_sink_move_input() {
    
    _sink=$1
    _inputs="$(pactl list short sink-inputs | cut -f 1)"

    for _input in ${_inputs}; do

        pacmd move-sink-input "${_inputs}" "${_sink}"
        log-info "input %s moved to sink %s" "${_input}" "${_sink}"
    
    done

}

_audio_sink_muted() {

    _sink=$1
    
    pacmd list-sinks | grep -A 15 "index: ${_sink}" | awk '/muted/ {print $2; exit}'

}

_audio_sink_name() {

    _sink=$1

    pactl list sinks short | awk -v sink="${_sink}" '{ if ($1 == sink) {print $2} }'

}

_audio_sink_next() {
    
    _indexes=($(_audio_sink_indexes))

    echo ${_indexes[@]}
    
    [[ ${#_indexes[@]} -eq 0 ]] && return

    _current=$(_audio_sink_current)
    _next=
    
    [[ "${_current}" -ge "${_indexes[-1]}" ]] && _next=${_indexes[0]} || {
    
        for _idx in "${_indexes[@]}"; do
            
            [[ "${_current}" -lt "${_idx}" ]] && \
                _next=${_idx} && \
                break

        done
    
    }

    log-info "changed to sink %s" "${_next}"
    
    _audio_sink_default "${_next}"
    _audio_sink_move_input "${_next}"

    

}

_audio_sink_volume() {

    _sink=$1

    # TODO: convert to awk program
    pacmd list-sinks | grep -A 15 'index: '"${_sink}"'' | grep 'volume:' | grep -E -v 'base volume:' | awk -F : '{print $3; exit}' | grep -o -P '.{0,3}%' | sed 's/.$//' | tr -d ' '

}

# ------------------------------

_audio_spectrum() {

    [[ ! -d "${audio_cache_dir}" ]] && mkdir -p "${audio_cache_dir}" 

    [[ -p ${audio_spectrum_pipe} ]] && unlink "${audio_spectrum_pipe}"
    mkfifo ${audio_spectrum_pipe}

    echo "
        [general]
        bars = 32

        [input]
        method = pulse
        source = auto

        [output]
        method = raw
        raw_target = ${audio_spectrum_pipe} 
        data_format = ascii
        ascii_max_range = 7
    " > ${audio_spectrum_cfg}
    
    cava -p ${audio_spectrum_cfg} &

    cat ${audio_spectrum_pipe} | cava-spectrum

}

# ------------------------------

_audio_subscribe() {

    while IFS="'# " read -a _event; do

        _type=${_event[1]}
        _element=${_event[3]}
        _id=${_event[4]}

        case "${_element}:${_type}" in
            *:change)  echo ${_element} id ${_id} has changed ;;
            *:new) echo new ${_element} id ${_id} ;;
            *:remove) echo ${_element} id ${_id} has been removed;;
            *) echo ${_element} id ${_id} has ${_type}
        esac
    
    done < <(pactl subscribe)

}

# ------------------------------

_audio_volume_decrease() {

    _sink=$(_audio_sink_current)
    pactl set-sink-volume "${_sink}" "-${audio_volume_step}%"

}

_audio_volume_increase() {

    _sink=$(_audio_sink_current)
    
    _volume_current=$(_audio_sink_volume "${_sink}")
    _volume_max_limit=$((audio_volume_max - audio_volume_step))
    
    _volume_value=${_volume_current}
    
    [[ "${_volume_current}" -lt "${_volume_max_limit}" ]] && \
        _volume_value="+$audio_volume_step%"
    
    [[ "${_volume_current}" -le "${audio_volume_max}" ]] && \
    [[ "${_volume_current}" -ge "${_volume_max_limit}" ]] && \
        _volume_value="${audio_volume_max}%"
    
    
    pactl set-sink-volume "${_sink}" "${_volume_value}"

}

_audio_volume_query() {
    
    _sink=$(_audio_sink_current)
    echo $(_audio_sink_volume "${_sink}")%

}

# ------------------------------

_audio "$@"