#!/usr/bin/env sh

# ------------------------------

dotfiles_source_root="$(cd "$(dirname "$0")" && pwd)"
dotfiles_target_root="${HOME}"
dotfiles_ignore="\.((?:pre|post)?(?:un)?install|fold)"

# ------------------------------

_dotfiles() {

   [[ $# -eq 0 ]] && {
        echo "usage: $(basename $0) command"
        return 1
   }

   _command=$1
   shift 2>/dev/null

   pushd "${dotfiles_source_root}" > /dev/null

   case ${_command} in
      
      i|install) _dotfiles_install "$@" ;;
      p|pass) _dotfiles_pass "$@" ;;
      r|reinstall) _dotfiles_reinstall "$@" ;;
      u|uninstall) _dotfiles_uninstall "$@" ;;
      
      *) printf "command '%s' unknown" "${_command}" && return ;;

   esac

   popd > /dev/null


}


# ------------------------------

_dotfiles_install() {

   [[ ! -d "${dotfiles_target_root}" ]] && mkdir -p "${dotfiles_target_root}"

   _pkgs=${@:-"*"}

   for _pkg in ${_pkgs}; do
      
      [[ ! -d ${_pkg} ]] && continue
      
      [[ ${_pkg} =~ /^./ ]] && {
         echo "package '${_pkg}' prefixed with a period... ignoring"
         continue
      }

      _dotfiles_pre_install

      [[ -f "${_pkg}/.install" && -x "${_pkg}/.install" ]] && {
         echo "package '${_pkg}' is being installed by script"
         source "${_pkg}/.install"
      }
      
      [[ ! -f "${_pkg}/.install" ]] && {

         _no_folding="--no-folding"
         
         [[ -f "${_pkg}/.fold" ]] && _no_folding=""

         echo "package '${_pkg}' is being installed by stow"
         stow -t "${dotfiles_target_root}" -S ${_pkg} --ignore="${dotfiles_ignore}" ${_no_folding}

         [[ $? -ne 0 ]] && echo "... failed to install"

      }

      _dotfiles_post_install

   done

}

# ------------------------------

_dotfiles_pre_install() {

   _script="${dotfiles_source_root}/${_pkg}/.preinstall"
      
   [[ -f "${_script}" && -x "${_script}" ]] && {
      echo "package '${_pkg}' executing preinstall script"
      source "${_script}"
   }

}

_dotfiles_pre_uninstall() {

   _script="${dotfiles_source_root}/${_pkg}/.preuninstall"
      
   [[ -f "${_script}" && -x "${_script}" ]] && {
      echo "package '${_pkg}' executing preuninstall script"
      source "${_script}"
   }
   
}

_dotfiles_post_install() {

   _script="${dotfiles_source_root}/${_pkg}/.postinstall"
      
   [[ -f "${_script}" && -x "${_script}" ]] && {
      echo "package '${_pkg}' executing postinstall script"
      source "${_script}"
   }

}

_dotfiles_post_uninstall() {

   _script="${dotfiles_source_root}/${_pkg}/.postuninstall"
      
   [[ -f "${_script}" && -x "${_script}" ]] && {
      echo "package '${_pkg}' executing postuninstall script"
      source "${_script}"
   }
   
}

# ------------------------------

_dotfiles_reinstall() {

   _dotfiles_uninstall $* 
   _dotfiles_install $* 

}

# ------------------------------

_dotfiles_uninstall() {

   [[ ! -d "${dotfiles_target_root}" ]] && return 1

   _pkgs=${@:-"*"}

   for _pkg in ${_pkgs}; do
      
      [[ ! -d ${_pkg} ]] && continue

      [[ ${_pkg} =~ /^./ ]] && {
         echo "package '${_pkg}' prefixed with a period... ignoring"
         continue
      }

      _dotfiles_pre_uninstall
         
      [[ -f "${_pkg}/.uninstall" && -x "${_pkg}/.uninstall" ]] && {
         echo "package '${_pkg}' is being uninstalled by script"
         source "${_pkg}/.uninstall"
      }
      
      [[ ! -f "${_pkg}/.uninstall"  && ! -f "${_pkg}/.install" ]] && {

        _no_folding="--no-folding"
         
         [[ -f "${_pkg}/.fold" ]] && _no_folding=""
         
         echo "package '${_pkg}' is being uninstalled by stow"
         stow -t "${dotfiles_target_root}" -D ${_pkg} --ignore="${dotfiles_ignore}" ${_no_folding}

         [[ $? -ne 0 ]] && echo "... failed to install"

      }

      _dotfiles_post_uninstall

   done

}

# ------------------------------

_dotfiles "$@"

