#!/usr/bin/env sh

name=$(basename $0)

# ------------------------------

# https://superuser.com/questions/1701385/simple-bluetooth-device-monitor-with-timestamps
# https://github.com/nickclyde/rofi-bluetooth.git

# ------------------------------

source "$(which _func)"
source "$(which _jq)"
source "$(which _log)"

# ------------------------------

bluetooth_cache_dir="${XDG_CACHE_HOME}/${name}"
bluetooth_config_dir="${XDG_CONFIG_HOME}/${name}"
bluetooth_data_dir="${XDG_DATA_HOME}/${name}"

# ------------------------------

_bluetooth() {

    [[ $# -eq 0 ]] && {
        _log_error "command not specified"
        return 1
    }

    _command=$1
    shift 2>/dev/null

    case "${_command}" in
        
        controller-default) _bluetooth_controller_default $* ;;
        controller-list) _bluetooth_controller_list $* ;;
        controller-select) _bluetooth_controller_select $* ;;
        
        device-connect) _bluetooth_device_connect $* ;;
        device-connected) _bluetooth_device_connect $* ;;
        device-disconnect) _bluetooth_device_disconnect $* ;;
        device-pair) _bluetooth_device_pair $* ;;
        device-paired) _bluetooth_device_paired $* ;;
        device-trust) _bluetooth_device_trust $* ;;
        device-trusted) _bluetooth_device_trusted $* ;;
        device-unpair) _bluetooth_device_unpair $* ;;
        device-unpaired) _bluetooth_device_unpaired $* ;;

        discover-disable) _bluetooth_discover_disable $* ;;
        discover-enable) _bluetooth_discover_enable $* ;;
        discover-state) _bluetooth_discover_state $* ;;
        discover-toggle) _bluetooth_discover_toggle $* ;;

        pairing-disable) _bluetooth_pairing_disable $* ;;
        pairing-enable) _bluetooth_pairing_enable $* ;;
        pairing-state) _bluetooth_pairing_state $* ;;
        pairing-toggle) _bluetooth_pairing_toggle $* ;;

        power-disable) _bluetooth_power_disable $* ;;
        power-enable) _bluetooth_power_enable $* ;;
        power-state) _bluetooth_power_state $* ;;
        power-toggle) _bluetooth_power_toggle $* ;;

        scan-disable) _bluetooth_scan_disable $* ;;
        scan-enable) _bluetooth_scan_enable $* ;;
        scan-state) _bluetooth_scan_state $* ;;
        scan-toggle) _bluetooth_scan_toggle $* ;;

        *) _log_warning "command '%s' unsupported" "${_command}" ;;

    esac



}

# ------------------------------

_bluetooth_controller_default() {
    bluetoothctl list | grep '\[default\]' | cut -d ' ' -f 2
}

_bluetooth_controller_list() {
    bluetoothctl list | cut -d ' ' -f 2
}

_bluetooth_controller_select() {

    _controller=$1

    _log_info "select controller '${_controller}'"
    bluetoothctl select "${_controller}"

}

# ------------------------------

_bluetooth_device_connect() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_connected() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_disconnect() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_pair() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_paired() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_trust() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_trusted() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_unpair() {
    _func_unimplemented "${FUNCNAME}" 
}

_bluetooth_device_untrust() {
    _func_unimplemented "${FUNCNAME}" 
}

# ------------------------------

_bluetooth_discover_disable() {

    [[ $(_bluetooth_discover_state) ]] && {
        _log_info "disabling discover"
        bluetoothctl discoverable off
    }

}

_bluetooth_discover_enable() {

     [[ ! $(_bluetooth_discover_state) ]] && {
        _log_info "enabling discover"
        bluetoothctl discoverable on
    }

}

_bluetooth_discover_state() {

    bluetoothctl show | grep -q "Discoverable: yes" && return 0 || return 1

}

_bluetooth_discover_toggle() {

    _bluetooth_discover_state && _bluetooth_discover_disable || _bluetooth_discover_enable

}

# ------------------------------

_bluetooth_pairing_disable() {

    [[ $(_bluetooth_pairing_state) ]] && {
        _log_info "disabling pairing"
        bluetoothctl pairable off
    }

}

_bluetooth_pairing_enable() {

     [[ ! $(_bluetooth_pairing_state) ]] && {
        _log_info "enabling pairing"
        bluetoothctl pairable on
    }

}

_bluetooth_pairing_state() {

    bluetoothctl show | grep -q "Pairable: yes" && return 0 || return 1

}

_bluetooth_pairing_toggle() {

    _bluetooth_pairing_state && _bluetooth_pairing_disable || _bluetooth_pairing_enable

}

# ------------------------------

_bluetooth_power_disable() {

    [[ $(_bluetooth_power_state) ]] && {
        _log_info "disabling power"
        bluetoothctl power off
    }

}

_bluetooth_power_enable() {

     [[ ! $(_bluetooth_power_state) ]] && {
        _log_info "enabling power"
        bluetoothctl power on
    }

}

_bluetooth_power_state() {

    bluetoothctl show | grep -q "Powered: yes" && return 0 || return 1

}

_bluetooth_power_toggle() {

    _bluetooth_power_state && _bluetooth_power_disable || _bluetooth_power_enable

}

# ------------------------------

_bluetooth_scan_disable() {

    [[ $(_bluetooth_scan_state) ]] && {
        _log_info "disabling scanning"
        bluetoothctl scan off
    }

}

_bluetooth_scan_enable() {

     [[ ! $(_bluetooth_scan_state) ]] && {
        _log_info "enabling scanning"
        bluetoothctl scan on
    }

}

_bluetooth_scan_state() {

    bluetoothctl show | grep -q "Discovering: yes" && return 0 || return 1

}

_bluetooth_scan_toggle() {

    _bluetooth_scan_state && _bluetooth_scan_disable || _bluetooth_scan_enable

}

# ------------------------------

_bluetooth "$@"